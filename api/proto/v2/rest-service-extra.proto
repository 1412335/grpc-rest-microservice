syntax = "proto3";

option java_multiple_files = true;
option go_package = ".;api_v2";

package v2;

import "google/api/annotations.proto";

import "common.proto";

service ServiceExtra {

    rpc Login (v2.LoginRequest) returns (v2.LoginResponse) {
        option (google.api.http) = {
            post: "/v2/extra/login",
            body: "*"
        };
    }

    rpc Ping (v2.MessagePing) returns (v2.MessagePong) {
        option (google.api.http) = {
            get: "/v2/extra/ping/{timestamp}"
        };
    }

    rpc Post (v2.MessagePing) returns (v2.MessagePong) {
        option (google.api.http) = {
            post: "/v2/extra/post",
            // MessagePing sẽ dưới dạng chuỗi Json khi gửi Request (vd: '{"timestamp":70000}')
            body: "*"
        };
    }

    // -- streaming
    // response streaming
    rpc StreamingPing (v2.StreamingMessagePing) returns (stream v2.StreamingMessagePong) {
        option (google.api.http) = {
            get: "/v2/extra/ping/stream/{timestamp}"
        };
    }

    // request streaming
    // DO NOT SUPPORT BY GRPC-WEB
    rpc StreamingPost (stream v2.StreamingMessagePing) returns (v2.StreamingMessagePong) {
        option (google.api.http) = {
            post: "/v2/extra/post/stream"
            body: "*"
        };
    }

    // two-way streaming
    // DO NOT SUPPORT BY GRPC-WEB
    rpc DuplexStreamingPing (stream v2.StreamingMessagePing) returns (stream v2.StreamingMessagePong) {
        option (google.api.http) = {
            post: "/v2/extra/post/duplex-stream"
            body: "*"
        };
    }

    // // A sequence of requests followed by a sequence of responses.
    // // The server buffers all the client messages and then returns the same
    // // client messages one by one after the client half-closes the stream.
    // // This is how an image recognition API may work.
    // rpc HalfDuplexEcho(stream EchoRequest) returns (stream EchoResponse);
}
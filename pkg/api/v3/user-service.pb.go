// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user-service.proto

package api_v3

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Role int32

const (
	Role_GUEST  Role = 0
	Role_MEMBER Role = 1
	Role_ADMIN  Role = 2
)

var Role_name = map[int32]string{
	0: "GUEST",
	1: "MEMBER",
	2: "ADMIN",
}

var Role_value = map[string]int32{
	"GUEST":  0,
	"MEMBER": 1,
	"ADMIN":  2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a3086c73a75cdba, []int{0}
}

type User struct {
	Id                   uint32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Role                 Role             `protobuf:"varint,2,opt,name=role,proto3,enum=api_v3.Role" json:"role,omitempty"`
	CreatedAt            *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a3086c73a75cdba, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

func (m *User) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type UserRole struct {
	Role                 Role     `protobuf:"varint,1,opt,name=role,proto3,enum=api_v3.Role" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserRole) Reset()         { *m = UserRole{} }
func (m *UserRole) String() string { return proto.CompactTextString(m) }
func (*UserRole) ProtoMessage()    {}
func (*UserRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a3086c73a75cdba, []int{1}
}
func (m *UserRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserRole.Unmarshal(m, b)
}
func (m *UserRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserRole.Marshal(b, m, deterministic)
}
func (m *UserRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRole.Merge(m, src)
}
func (m *UserRole) XXX_Size() int {
	return xxx_messageInfo_UserRole.Size(m)
}
func (m *UserRole) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRole.DiscardUnknown(m)
}

var xxx_messageInfo_UserRole proto.InternalMessageInfo

func (m *UserRole) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_GUEST
}

type ListUsersRequest struct {
	// list users created after timestamp
	CreatedSince *types.Timestamp `protobuf:"bytes,1,opt,name=created_since,json=createdSince,proto3" json:"created_since,omitempty"`
	// list users in duration from created_since
	OlderThen            *types.Duration `protobuf:"bytes,2,opt,name=older_then,json=olderThen,proto3" json:"older_then,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListUsersRequest) Reset()         { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()    {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a3086c73a75cdba, []int{2}
}
func (m *ListUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersRequest.Unmarshal(m, b)
}
func (m *ListUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersRequest.Marshal(b, m, deterministic)
}
func (m *ListUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersRequest.Merge(m, src)
}
func (m *ListUsersRequest) XXX_Size() int {
	return xxx_messageInfo_ListUsersRequest.Size(m)
}
func (m *ListUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersRequest proto.InternalMessageInfo

func (m *ListUsersRequest) GetCreatedSince() *types.Timestamp {
	if m != nil {
		return m.CreatedSince
	}
	return nil
}

func (m *ListUsersRequest) GetOlderThen() *types.Duration {
	if m != nil {
		return m.OlderThen
	}
	return nil
}

type UpdateUserRequest struct {
	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// The update mask applies to the resource. For the `FieldMask` definition,
	// see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
	UpdateMask           *types.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateUserRequest) Reset()         { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()    {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a3086c73a75cdba, []int{3}
}
func (m *UpdateUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateUserRequest.Unmarshal(m, b)
}
func (m *UpdateUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateUserRequest.Marshal(b, m, deterministic)
}
func (m *UpdateUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserRequest.Merge(m, src)
}
func (m *UpdateUserRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateUserRequest.Size(m)
}
func (m *UpdateUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserRequest proto.InternalMessageInfo

func (m *UpdateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UpdateUserRequest) GetUpdateMask() *types.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func init() {
	proto.RegisterEnum("api_v3.Role", Role_name, Role_value)
	proto.RegisterType((*User)(nil), "api_v3.User")
	proto.RegisterType((*UserRole)(nil), "api_v3.UserRole")
	proto.RegisterType((*ListUsersRequest)(nil), "api_v3.ListUsersRequest")
	proto.RegisterType((*UpdateUserRequest)(nil), "api_v3.UpdateUserRequest")
}

func init() { proto.RegisterFile("user-service.proto", fileDescriptor_2a3086c73a75cdba) }

var fileDescriptor_2a3086c73a75cdba = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4f, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xa1, 0x94, 0xf5, 0x75, 0xdd, 0x8a, 0xc5, 0x9f, 0x2e, 0x4c, 0x10, 0xe5, 0x54, 0x55,
	0x90, 0x4e, 0xed, 0x05, 0xb6, 0x03, 0x6a, 0xb5, 0x82, 0x26, 0xad, 0x20, 0xa5, 0xed, 0x01, 0x2e,
	0x95, 0x57, 0x7b, 0x9b, 0xb5, 0x34, 0x0e, 0xb1, 0x5b, 0x69, 0x42, 0x5c, 0xb8, 0x73, 0xe2, 0x9b,
	0xc1, 0x57, 0xe0, 0x83, 0x20, 0x3b, 0x6e, 0x50, 0x52, 0xc1, 0x29, 0x91, 0xdf, 0xef, 0xcf, 0x7b,
	0xef, 0xf7, 0x00, 0xaf, 0x24, 0x4b, 0x5f, 0x4a, 0x96, 0xae, 0xf9, 0x82, 0x05, 0x49, 0x2a, 0x94,
	0xc0, 0x55, 0x92, 0xf0, 0xf9, 0xba, 0xef, 0x3e, 0xbd, 0x12, 0xe2, 0x2a, 0x62, 0x5d, 0xf3, 0x7a,
	0xb1, 0xba, 0xec, 0xb2, 0x65, 0xa2, 0x6e, 0x33, 0x90, 0xfb, 0xbc, 0x5c, 0x54, 0x7c, 0xc9, 0xa4,
	0x22, 0xcb, 0xc4, 0x02, 0x9e, 0x95, 0x01, 0x74, 0x95, 0x12, 0xc5, 0x45, 0x6c, 0xeb, 0x5e, 0xb9,
	0x7e, 0xc9, 0x59, 0x44, 0xe7, 0x4b, 0x22, 0x6f, 0x2c, 0xe2, 0xd0, 0x22, 0x48, 0xc2, 0xbb, 0x24,
	0x8e, 0x85, 0x32, 0x74, 0x99, 0x55, 0x7d, 0x09, 0x95, 0x99, 0x64, 0x29, 0xde, 0x03, 0x87, 0xd3,
	0x16, 0xf2, 0x50, 0xbb, 0x11, 0x3a, 0x9c, 0x62, 0x0f, 0x2a, 0xa9, 0x88, 0x58, 0xcb, 0xf1, 0x50,
	0x7b, 0xaf, 0xb7, 0x1b, 0x64, 0xc3, 0x04, 0xa1, 0x88, 0x58, 0x68, 0x2a, 0xf8, 0x35, 0xc0, 0x22,
	0x65, 0x44, 0x31, 0x3a, 0x27, 0xaa, 0x75, 0xd7, 0x43, 0xed, 0x7a, 0xcf, 0x0d, 0x32, 0xb3, 0x60,
	0xd3, 0x4e, 0x30, 0xdd, 0xcc, 0x13, 0xd6, 0x2c, 0x7a, 0xa0, 0xfc, 0x17, 0xb0, 0xa3, 0x4d, 0xb5,
	0x58, 0x6e, 0x84, 0xfe, 0x65, 0xe4, 0x7f, 0x47, 0xd0, 0x3c, 0xe7, 0x52, 0x69, 0x8a, 0x0c, 0xd9,
	0xe7, 0x15, 0x93, 0x0a, 0xbf, 0x81, 0xc6, 0xc6, 0x5d, 0xf2, 0x78, 0x91, 0xf1, 0xff, 0xdf, 0xc0,
	0xae, 0x25, 0x4c, 0x34, 0x1e, 0xbf, 0x02, 0x10, 0x11, 0x65, 0xe9, 0x5c, 0x5d, 0xb3, 0xd8, 0x8c,
	0x59, 0xef, 0x1d, 0x6c, 0xb1, 0x4f, 0xed, 0xb6, 0xc3, 0x9a, 0x01, 0x4f, 0xaf, 0x59, 0xec, 0xa7,
	0xf0, 0x60, 0x96, 0x50, 0xa2, 0x98, 0x99, 0xc1, 0xf6, 0xe3, 0x41, 0x45, 0xdf, 0x80, 0x6d, 0x23,
	0x1f, 0xc3, 0x40, 0x4c, 0x05, 0x9f, 0x40, 0x7d, 0x65, 0x68, 0x26, 0x1c, 0xeb, 0xb8, 0xdd, 0xef,
	0x5b, 0x9d, 0xdf, 0x98, 0xc8, 0x9b, 0x10, 0x32, 0xb8, 0xfe, 0xef, 0xb4, 0xa1, 0x62, 0xb6, 0x55,
	0x83, 0x7b, 0xef, 0x66, 0xa3, 0xc9, 0xb4, 0x79, 0x07, 0x03, 0x54, 0xc7, 0xa3, 0xf1, 0x70, 0x14,
	0x36, 0x91, 0x7e, 0x1e, 0x9c, 0x8e, 0xcf, 0xde, 0x37, 0x9d, 0xde, 0x4f, 0x07, 0xea, 0xda, 0x75,
	0x92, 0x1d, 0x23, 0x3e, 0x83, 0xfb, 0x03, 0x4a, 0x4d, 0xc6, 0x85, 0xae, 0xdc, 0xc7, 0x5b, 0xd6,
	0x23, 0x7d, 0x98, 0x7e, 0xeb, 0xdb, 0xaf, 0xdf, 0x3f, 0x1c, 0xec, 0x37, 0xcc, 0xc5, 0xac, 0xfb,
	0x5d, 0xdd, 0xbd, 0x3c, 0x46, 0x1d, 0x7c, 0x0e, 0xb5, 0x3c, 0x07, 0xdc, 0xda, 0x88, 0x95, 0xa3,
	0x71, 0x0b, 0x36, 0xfe, 0x23, 0x23, 0xb7, 0x8f, 0x8b, 0x72, 0x47, 0x08, 0x7f, 0x80, 0xfd, 0x9c,
	0x3a, 0xbc, 0x35, 0xd3, 0x35, 0x0b, 0x6b, 0x13, 0x11, 0x2b, 0x69, 0xb9, 0x46, 0xeb, 0x21, 0xc6,
	0x05, 0xad, 0xae, 0xbe, 0x92, 0x23, 0x84, 0x3f, 0x02, 0xfc, 0xcd, 0x05, 0x1f, 0xe4, 0xcc, 0x72,
	0x56, 0x25, 0x51, 0xdf, 0x88, 0x1e, 0xf6, 0x9e, 0x14, 0x45, 0xbf, 0xe8, 0x4f, 0xc0, 0xe9, 0xd7,
	0x63, 0xd4, 0x19, 0xc2, 0xa7, 0x9d, 0xe0, 0x24, 0x23, 0x5d, 0x54, 0xcd, 0xbe, 0xfa, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x86, 0x14, 0x6d, 0xd8, 0xf4, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*types.Empty, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UserService_ListUsersClient, error)
	ListUsersByRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (UserService_ListUsersByRoleClient, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/api_v3.UserService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (UserService_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[0], "/api_v3.UserService/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) ListUsersByRole(ctx context.Context, in *UserRole, opts ...grpc.CallOption) (UserService_ListUsersByRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UserService_serviceDesc.Streams[1], "/api_v3.UserService/ListUsersByRole", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUsersByRoleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUsersByRoleClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceListUsersByRoleClient struct {
	grpc.ClientStream
}

func (x *userServiceListUsersByRoleClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api_v3.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	AddUser(context.Context, *User) (*types.Empty, error)
	ListUsers(*ListUsersRequest, UserService_ListUsersServer) error
	ListUsersByRole(*UserRole, UserService_ListUsersByRoleServer) error
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) AddUser(ctx context.Context, req *User) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (*UnimplementedUserServiceServer) ListUsers(req *ListUsersRequest, srv UserService_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedUserServiceServer) ListUsersByRole(req *UserRole, srv UserService_ListUsersByRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsersByRole not implemented")
}
func (*UnimplementedUserServiceServer) UpdateUser(ctx context.Context, req *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_v3.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsers(m, &userServiceListUsersServer{stream})
}

type UserService_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_ListUsersByRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRole)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUsersByRole(m, &userServiceListUsersByRoleServer{stream})
}

type UserService_ListUsersByRoleServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceListUsersByRoleServer struct {
	grpc.ServerStream
}

func (x *userServiceListUsersByRoleServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_v3.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api_v3.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUsers",
			Handler:       _UserService_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUsersByRole",
			Handler:       _UserService_ListUsersByRole_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user-service.proto",
}

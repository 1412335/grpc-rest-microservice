// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: rest-service-extra.proto

package api_v2

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_rest_service_extra_proto protoreflect.FileDescriptor

var file_rest_service_extra_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x32, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xbe, 0x04, 0x0a, 0x0c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x48, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x4c, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0f,
	0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x7b, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x7d, 0x12, 0x43, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x0f, 0x2e, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2e, 0x76,
	0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x2f, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x7b, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x7d, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01,
	0x2a, 0x28, 0x01, 0x12, 0x76, 0x0a, 0x13, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x2d, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0c, 0x50, 0x01, 0x5a,
	0x08, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var file_rest_service_extra_proto_goTypes = []interface{}{
	(*LoginRequest)(nil),         // 0: v2.LoginRequest
	(*MessagePing)(nil),          // 1: v2.MessagePing
	(*StreamingMessagePing)(nil), // 2: v2.StreamingMessagePing
	(*LoginResponse)(nil),        // 3: v2.LoginResponse
	(*MessagePong)(nil),          // 4: v2.MessagePong
	(*StreamingMessagePong)(nil), // 5: v2.StreamingMessagePong
}
var file_rest_service_extra_proto_depIdxs = []int32{
	0, // 0: v2.ServiceExtra.Login:input_type -> v2.LoginRequest
	1, // 1: v2.ServiceExtra.Ping:input_type -> v2.MessagePing
	1, // 2: v2.ServiceExtra.Post:input_type -> v2.MessagePing
	2, // 3: v2.ServiceExtra.StreamingPing:input_type -> v2.StreamingMessagePing
	2, // 4: v2.ServiceExtra.StreamingPost:input_type -> v2.StreamingMessagePing
	2, // 5: v2.ServiceExtra.DuplexStreamingPing:input_type -> v2.StreamingMessagePing
	3, // 6: v2.ServiceExtra.Login:output_type -> v2.LoginResponse
	4, // 7: v2.ServiceExtra.Ping:output_type -> v2.MessagePong
	4, // 8: v2.ServiceExtra.Post:output_type -> v2.MessagePong
	5, // 9: v2.ServiceExtra.StreamingPing:output_type -> v2.StreamingMessagePong
	5, // 10: v2.ServiceExtra.StreamingPost:output_type -> v2.StreamingMessagePong
	5, // 11: v2.ServiceExtra.DuplexStreamingPing:output_type -> v2.StreamingMessagePong
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rest_service_extra_proto_init() }
func file_rest_service_extra_proto_init() {
	if File_rest_service_extra_proto != nil {
		return
	}
	file_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rest_service_extra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rest_service_extra_proto_goTypes,
		DependencyIndexes: file_rest_service_extra_proto_depIdxs,
	}.Build()
	File_rest_service_extra_proto = out.File
	file_rest_service_extra_proto_rawDesc = nil
	file_rest_service_extra_proto_goTypes = nil
	file_rest_service_extra_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceExtraClient is the client API for ServiceExtra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceExtraClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Ping(ctx context.Context, in *MessagePing, opts ...grpc.CallOption) (*MessagePong, error)
	Post(ctx context.Context, in *MessagePing, opts ...grpc.CallOption) (*MessagePong, error)
	// -- streaming
	// response streaming
	StreamingPing(ctx context.Context, in *StreamingMessagePing, opts ...grpc.CallOption) (ServiceExtra_StreamingPingClient, error)
	// request streaming
	// DO NOT SUPPORT BY GRPC-WEB
	StreamingPost(ctx context.Context, opts ...grpc.CallOption) (ServiceExtra_StreamingPostClient, error)
	// two-way streaming
	// DO NOT SUPPORT BY GRPC-WEB
	DuplexStreamingPing(ctx context.Context, opts ...grpc.CallOption) (ServiceExtra_DuplexStreamingPingClient, error)
}

type serviceExtraClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceExtraClient(cc grpc.ClientConnInterface) ServiceExtraClient {
	return &serviceExtraClient{cc}
}

func (c *serviceExtraClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/v2.ServiceExtra/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceExtraClient) Ping(ctx context.Context, in *MessagePing, opts ...grpc.CallOption) (*MessagePong, error) {
	out := new(MessagePong)
	err := c.cc.Invoke(ctx, "/v2.ServiceExtra/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceExtraClient) Post(ctx context.Context, in *MessagePing, opts ...grpc.CallOption) (*MessagePong, error) {
	out := new(MessagePong)
	err := c.cc.Invoke(ctx, "/v2.ServiceExtra/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceExtraClient) StreamingPing(ctx context.Context, in *StreamingMessagePing, opts ...grpc.CallOption) (ServiceExtra_StreamingPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceExtra_serviceDesc.Streams[0], "/v2.ServiceExtra/StreamingPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceExtraStreamingPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceExtra_StreamingPingClient interface {
	Recv() (*StreamingMessagePong, error)
	grpc.ClientStream
}

type serviceExtraStreamingPingClient struct {
	grpc.ClientStream
}

func (x *serviceExtraStreamingPingClient) Recv() (*StreamingMessagePong, error) {
	m := new(StreamingMessagePong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceExtraClient) StreamingPost(ctx context.Context, opts ...grpc.CallOption) (ServiceExtra_StreamingPostClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceExtra_serviceDesc.Streams[1], "/v2.ServiceExtra/StreamingPost", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceExtraStreamingPostClient{stream}
	return x, nil
}

type ServiceExtra_StreamingPostClient interface {
	Send(*StreamingMessagePing) error
	CloseAndRecv() (*StreamingMessagePong, error)
	grpc.ClientStream
}

type serviceExtraStreamingPostClient struct {
	grpc.ClientStream
}

func (x *serviceExtraStreamingPostClient) Send(m *StreamingMessagePing) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceExtraStreamingPostClient) CloseAndRecv() (*StreamingMessagePong, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamingMessagePong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceExtraClient) DuplexStreamingPing(ctx context.Context, opts ...grpc.CallOption) (ServiceExtra_DuplexStreamingPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ServiceExtra_serviceDesc.Streams[2], "/v2.ServiceExtra/DuplexStreamingPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceExtraDuplexStreamingPingClient{stream}
	return x, nil
}

type ServiceExtra_DuplexStreamingPingClient interface {
	Send(*StreamingMessagePing) error
	Recv() (*StreamingMessagePong, error)
	grpc.ClientStream
}

type serviceExtraDuplexStreamingPingClient struct {
	grpc.ClientStream
}

func (x *serviceExtraDuplexStreamingPingClient) Send(m *StreamingMessagePing) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceExtraDuplexStreamingPingClient) Recv() (*StreamingMessagePong, error) {
	m := new(StreamingMessagePong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceExtraServer is the server API for ServiceExtra service.
type ServiceExtraServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Ping(context.Context, *MessagePing) (*MessagePong, error)
	Post(context.Context, *MessagePing) (*MessagePong, error)
	// -- streaming
	// response streaming
	StreamingPing(*StreamingMessagePing, ServiceExtra_StreamingPingServer) error
	// request streaming
	// DO NOT SUPPORT BY GRPC-WEB
	StreamingPost(ServiceExtra_StreamingPostServer) error
	// two-way streaming
	// DO NOT SUPPORT BY GRPC-WEB
	DuplexStreamingPing(ServiceExtra_DuplexStreamingPingServer) error
}

// UnimplementedServiceExtraServer can be embedded to have forward compatible implementations.
type UnimplementedServiceExtraServer struct {
}

func (*UnimplementedServiceExtraServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedServiceExtraServer) Ping(context.Context, *MessagePing) (*MessagePong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedServiceExtraServer) Post(context.Context, *MessagePing) (*MessagePong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (*UnimplementedServiceExtraServer) StreamingPing(*StreamingMessagePing, ServiceExtra_StreamingPingServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingPing not implemented")
}
func (*UnimplementedServiceExtraServer) StreamingPost(ServiceExtra_StreamingPostServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingPost not implemented")
}
func (*UnimplementedServiceExtraServer) DuplexStreamingPing(ServiceExtra_DuplexStreamingPingServer) error {
	return status.Errorf(codes.Unimplemented, "method DuplexStreamingPing not implemented")
}

func RegisterServiceExtraServer(s *grpc.Server, srv ServiceExtraServer) {
	s.RegisterService(&_ServiceExtra_serviceDesc, srv)
}

func _ServiceExtra_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExtraServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ServiceExtra/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExtraServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceExtra_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExtraServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ServiceExtra/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExtraServer).Ping(ctx, req.(*MessagePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceExtra_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagePing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExtraServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v2.ServiceExtra/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExtraServer).Post(ctx, req.(*MessagePing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceExtra_StreamingPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingMessagePing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceExtraServer).StreamingPing(m, &serviceExtraStreamingPingServer{stream})
}

type ServiceExtra_StreamingPingServer interface {
	Send(*StreamingMessagePong) error
	grpc.ServerStream
}

type serviceExtraStreamingPingServer struct {
	grpc.ServerStream
}

func (x *serviceExtraStreamingPingServer) Send(m *StreamingMessagePong) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceExtra_StreamingPost_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceExtraServer).StreamingPost(&serviceExtraStreamingPostServer{stream})
}

type ServiceExtra_StreamingPostServer interface {
	SendAndClose(*StreamingMessagePong) error
	Recv() (*StreamingMessagePing, error)
	grpc.ServerStream
}

type serviceExtraStreamingPostServer struct {
	grpc.ServerStream
}

func (x *serviceExtraStreamingPostServer) SendAndClose(m *StreamingMessagePong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceExtraStreamingPostServer) Recv() (*StreamingMessagePing, error) {
	m := new(StreamingMessagePing)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceExtra_DuplexStreamingPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceExtraServer).DuplexStreamingPing(&serviceExtraDuplexStreamingPingServer{stream})
}

type ServiceExtra_DuplexStreamingPingServer interface {
	Send(*StreamingMessagePong) error
	Recv() (*StreamingMessagePing, error)
	grpc.ServerStream
}

type serviceExtraDuplexStreamingPingServer struct {
	grpc.ServerStream
}

func (x *serviceExtraDuplexStreamingPingServer) Send(m *StreamingMessagePong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceExtraDuplexStreamingPingServer) Recv() (*StreamingMessagePing, error) {
	m := new(StreamingMessagePing)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ServiceExtra_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v2.ServiceExtra",
	HandlerType: (*ServiceExtraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ServiceExtra_Login_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServiceExtra_Ping_Handler,
		},
		{
			MethodName: "Post",
			Handler:    _ServiceExtra_Post_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingPing",
			Handler:       _ServiceExtra_StreamingPing_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingPost",
			Handler:       _ServiceExtra_StreamingPost_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DuplexStreamingPing",
			Handler:       _ServiceExtra_DuplexStreamingPing_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rest-service-extra.proto",
}
